{"version":3,"sources":["Components/Element.jsx","Components/TableColumn.jsx","Components/TableHeader.jsx","Components/Modals/ModalComponent.jsx","Components/PeriodicTable.jsx","App.js","reportWebVitals.js","index.js"],"names":["Element","props","React","createElement","onClick","async","isOpen","setModalOpen","setElement","apiUrl","process","response","fetch","encodeURIComponent","search","ok","Error","data","json","setResults","error","console","className","symbol","period","name","russianName","TableColumn","number","TableHeader","ModalComponent","_ref","onClose","results","element","Modal","onRequestClose","shouldCloseOnOverlayClick","overlayClassName","length","url","map","item","index","key","id","htmlString","text","document","getElementById","innerHTML","DOMPurify","sanitize","querySelectorAll","forEach","el","classList","remove","add","handleClick","PeriodicTable","elements","setElements","useState","setError","modalOpen","useEffect","then","status","catch","message","Fragment","cellPadding","border","align","Array","from","_","i","isArray","rowNumber","rowElements","filter","row","rowCells","push","currentColumn","column","colSpan","atomicNumber","atomicMass","family","lanthanides","actinides","closeModal","setAppElement","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.293fdfba.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Element = (props) => {\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      if (props.isOpen) return; // ✅ Prevent opening again if already open\r\n      props.setModalOpen(true);\r\n      props.setElement(props);\r\n\r\n      const apiUrl = process.env.REACT_APP_API_URL;\r\n      const response = await fetch(`${apiUrl}/api/ASO/parse?input=${encodeURIComponent(props.search)}`);\r\n      if (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n      const data = await response.json();\r\n      props.setResults(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching ASO data:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <td>\r\n      <button onClick={handleSearch}>\r\n        <div className=\"container\">\r\n          <div className=\"leftcontainer\">{props.symbol}</div>\r\n          <div className=\"rightcontainer\">{props.period}</div>\r\n        </div>\r\n        <div>{props.name}</div>\r\n        <div>{props.russianName}</div>\r\n      </button>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Element;\r\n","import React from 'react';\r\n\r\nexport default function TableColumn(props) {\r\n    return (\r\n      <td>{props.number}</td>\r\n    );\r\n  }","import React from 'react';\r\n\r\nconst TableHeader = (props) => {\r\n    return (\r\n        // <th><a href='blank'>{props.number + 1}</a></th>\r\n        <th>{props.number + 1}</th>\r\n    );\r\n};\r\n\r\nexport default TableHeader;","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport DOMPurify from \"dompurify\"; // Import DOMPurify for sanitizing HTML\r\n\r\nconst ModalComponent = ({ isOpen, onClose, results = [], element }) => {\r\n  if (!isOpen) return null; // ✅ Ensure modal isn't rendered when closed\r\n\r\n  const handleClick = async (url,index) => {\r\n    try {\r\n      const apiUrl = process.env.REACT_APP_API_URL;\r\n      const response = await fetch(`${apiUrl}/api/ASO/article?url=${encodeURIComponent(url)}`);\r\n      if (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n      const htmlString = await response.text();\r\n      document.getElementById('article').innerHTML = DOMPurify.sanitize(htmlString);\r\n\r\n      const allDragElements = document.querySelectorAll('[id^=\"id-drag-\"]');\r\n      allDragElements.forEach(el => el.classList.remove('bold'));\r\n      document.getElementById(`id-drag-${index}`).classList.add('bold');\r\n    } catch (error) {\r\n      console.error(\"Error fetching ASO data:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onRequestClose={onClose}\r\n      shouldCloseOnOverlayClick={true}\r\n      className=\"modal-content\"\r\n      overlayClassName=\"modal-overlay\" >\r\n\r\n      <div className=\"container\">\r\n        <div className=\"leftcontainer\">\r\n          <h2>{element.name} - {element.russianName}</h2>\r\n\r\n          {results.length === 1 && results[0].url === '' ?\r\n            (<p>{results[0].name}</p>)\r\n            : results.length > 0 ? (\r\n              <ul>\r\n                {results.map((item, index) => (\r\n                  <li key={index} id={`id-drag-${index}`} onClick={() => { handleClick(item.url, index) }}>\r\n                    {item.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p>Loading...</p>\r\n            )}\r\n        </div>\r\n        <div className=\"rightcontainer\">\r\n          <div id=\"article\"></div>\r\n          <button onClick={onClose} className=\"close-button\">X</button>\r\n        </div>\r\n      </div>\r\n\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalComponent;\r\n","import Element from \"./Element\";\r\nimport TableColumn from \"./TableColumn\";\r\nimport TableHeader from \"./TableHeader\";\r\nimport React, { Fragment, useState, useEffect } from 'react';\r\nimport ModalComponent from \"../Components/Modals/ModalComponent\";\r\n\r\nexport default function PeriodicTable(props) {\r\n\r\n    const [elements, setElements] = useState(null);\r\n    const [element, setElement] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [results, setResults] = useState([]); // Ensure results is initialized as an empty array\r\n\r\n    const closeModal = () => {\r\n        setModalOpen(false);\r\n        setResults([]); // ✅ Clear results to prevent conflicts\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`${process.env.PUBLIC_URL}/resources/Elements.json`) // Assuming Elements.json is in the public/resources folder\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setElements(data);\r\n            })\r\n            .catch(error => {\r\n                setError(error);\r\n                console.error(\"Could not load elements:\", error);\r\n            });\r\n    }, []);\r\n\r\n    if (error) {\r\n        return <div>Error loading elements: {error.message}</div>;\r\n    }\r\n\r\n    if (!elements) {\r\n        return <div>Loading elements...</div>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <table cellPadding=\"10\" border=\"1\">\r\n                <thead>\r\n                    <tr align=\"center\">\r\n                        <th>&nbsp;</th>\r\n                        {Array.from({ length: 18 }, (_, i) => (\r\n                            <TableHeader key={i} number={i} />\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {elements && Array.isArray(elements) &&\r\n                        Array.from({ length: 7 }, (_, i) => {\r\n                            const rowNumber = i + 1;\r\n                            const rowElements = elements.filter(element => element.row === rowNumber);\r\n                            const rowCells = [];\r\n                            rowCells.push(<TableColumn key={i} number={rowNumber} />);\r\n\r\n                            let currentColumn = 1;\r\n\r\n                            rowElements.forEach(element => {\r\n                                if (element.column > currentColumn) {\r\n                                    rowCells.push(\r\n                                        <td\r\n                                            key={`empty-${rowNumber}-${currentColumn}`}\r\n                                            className={rowNumber === 1 ? '' : 'nonetopborder'}\r\n                                            colSpan={element.column - currentColumn}\r\n                                        ></td>\r\n                                    );\r\n                                    currentColumn = element.column;\r\n                                }\r\n                                rowCells.push(\r\n                                    <Element\r\n                                        key={element.atomicNumber}\r\n                                        period={element.atomicNumber}\r\n                                        symbol={element.symbol}\r\n                                        name={element.name}\r\n                                        russianName={element.russianName}\r\n                                        atomicMass={element.atomicMass}\r\n                                        family={element.family}\r\n                                        search={element.search}\r\n                                        setModalOpen={setModalOpen}\r\n                                        setResults={setResults}\r\n                                        setElement={setElement}\r\n                                    />);\r\n                                currentColumn = element.column + 1;\r\n                            });\r\n\r\n                            return <tr key={`row-${rowNumber}`}>{rowCells}</tr>;\r\n                        })\r\n                    }\r\n\r\n                    <tr className=\"separator\"><td colSpan={19}></td></tr>\r\n\r\n                    {(() => {\r\n                        const lanthanides = elements.filter(element => element.family === 'Lanthanides');\r\n                        const rowCells = [];\r\n                        rowCells.push(<td key={`empty-start-row-8`} className=\"border-right\" colSpan={3}></td>);\r\n\r\n                        lanthanides.forEach(element => {\r\n                            rowCells.push(\r\n                                <Element\r\n                                    key={element.atomicNumber}\r\n                                    period={element.atomicNumber}\r\n                                    symbol={element.symbol}\r\n                                    name={element.name}\r\n                                    russianName={element.russianName}\r\n                                    atomicMass={element.atomicMass}\r\n                                    family={element.family}\r\n                                    search={element.search}\r\n                                    setModalOpen={setModalOpen}\r\n                                    setResults={setResults}\r\n                                    setElement={setElement}\r\n                                />);\r\n                        });\r\n                        rowCells.push(<td key={`empty-end-row-8`} className=\"border-left\"></td>);\r\n\r\n                        return <tr key={`row-8`}>{rowCells}</tr>; // Replace this with the intended JSX or logic if needed\r\n                    })()}\r\n\r\n                    {(() => {\r\n                        const actinides = elements.filter(element => element.family === 'Actinides');\r\n                        const rowCells = [];\r\n                        rowCells.push(<td key={`empty-start-row-9`} className=\"border-right\" colSpan={3}></td>);\r\n\r\n                        actinides.forEach(element => {\r\n                            rowCells.push(\r\n                                <Element\r\n                                    key={element.atomicNumber}\r\n                                    period={element.atomicNumber}\r\n                                    symbol={element.symbol}\r\n                                    name={element.name}\r\n                                    russianName={element.russianName}\r\n                                    atomicMass={element.atomicMass}\r\n                                    family={element.family}\r\n                                    search={element.search}\r\n                                    setModalOpen={setModalOpen}\r\n                                    setResults={setResults}\r\n                                    setElement={setElement}\r\n                                />);\r\n                        });\r\n                        rowCells.push(<td key={`empty-end-row-9`} className=\"border-left\"></td>);\r\n\r\n                        return <tr key={`row-9`}>{rowCells}</tr>; // Replace this with the intended JSX or logic if needed\r\n                    })()}\r\n                </tbody>\r\n            </table>\r\n\r\n            {modalOpen && (\r\n                <ModalComponent \r\n                    isOpen={modalOpen} \r\n                    onClose={closeModal} \r\n                    results={results} // Ensure results is passed correctly\r\n                    element={element} \r\n                />\r\n            )}\r\n        </Fragment>\r\n    );\r\n}","import './css/App.css';\nimport './css/PeriodicTable.css';\nimport PeriodicTable from './Components/PeriodicTable';\nimport React from 'react';\nimport Modal from \"react-modal\";\n\n// Set the root element for accessibility\nModal.setAppElement(\"#root\");\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Периодическая таблица Менделеева</h1>\n      <PeriodicTable />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}